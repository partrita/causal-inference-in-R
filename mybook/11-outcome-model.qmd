# 가중 결과 모델 적합시키기 {#sec-outcome-model}

{{< include 00-setup.qmd >}}

```{r}
#| echo: false
# TODO: 첫 번째 판이 완료되면 제거
status("polishing")
```

## 일치된 데이터셋 사용하기

일치된 데이터셋에 결과 모델을 적합시킬 때, 원래 데이터를 일치된 항목만으로 하위 집합으로 만든 다음 다른 경우와 마찬가지로 이 데이터에 모델을 적합시킬 수 있습니다.
예를 들어, @sec-using-ps에서 했던 것처럼 매칭을 다시 수행하면 다음과 같이 `matched_data`라는 데이터셋에서 일치된 관찰을 추출할 수 있습니다.

```{r}
#| message: false
#| warning: false
library(broom)
library(touringplans)
library(MatchIt)

seven_dwarfs_9 <- seven_dwarfs_train_2018 |>
  filter(wait_hour == 9)

m <- matchit(
  park_extra_magic_morning ~ park_ticket_season + park_close + park_temperature_high,
  data = seven_dwarfs_9
)
matched_data <- get_matches(m)
```

그런 다음 이 데이터에 결과 모델을 적합시킬 수 있습니다.
이 분석에서는 엑스트라 매직 모닝 시간이 오전 9시에서 10시 사이의 평균 게시 대기 시간에 미치는 영향에 관심이 있습니다.
아래 선형 모델은 일치된 코호트에서 이를 추정합니다.

```{r}
lm(wait_minutes_posted_avg ~ park_extra_magic_morning, data = matched_data) |>
  tidy(conf.int = TRUE)
```

기본적으로 `{MatchIt}`은 처리군 간 평균 처리 효과를 추정한다는 점을 기억하십시오.
이는 엑스트라 매직 아워가 있는 날 중에서 엑스트라 매직 아워가 오전 9시에서 10시 사이의 평균 게시 대기 시간에 미치는 예상 영향이 7.9분(95% CI: 1.2-14.5)임을 의미합니다.

## 결과 모델에서 가중치 사용하기

이제 성향 점수 가중치를 사용하여 이 동일한 추정량을 추정해 보겠습니다.
위의 매칭 분석과 일치하도록 ATT 가중치를 사용할 것입니다.

```{r}
#| message: false
#| warning: false
library(propensity)

propensity_model <- glm(
    park_extra_magic_morning ~ park_ticket_season + park_close + park_temperature_high,
    data = seven_dwarfs_9,
    family = binomial()
  )

seven_dwarfs_9_with_ps <- propensity_model |>
  augment(type.predict = "response", data = seven_dwarfs_9)
seven_dwarfs_9_with_wt <- seven_dwarfs_9_with_ps |>
  mutate(w_att = wt_att(.fitted, park_extra_magic_morning))
```

`weights` 인수를 사용하여 *가중* 결과 모델을 적합시킬 수 있습니다.

```{r}
lm(
  wait_minutes_posted_avg ~ park_extra_magic_morning,
  data = seven_dwarfs_9_with_wt,
  weights = w_att
) |>
  tidy()
```

가중치를 사용하여 엑스트라 매직 아워가 있는 날 중에서 엑스트라 매직 아워가 오전 9시에서 10시 사이의 평균 게시 대기 시간에 미치는 예상 영향이 6.2분이라고 추정합니다.
이 접근 방식을 사용하면 점 추정치에 대해 원하는 추정치를 얻을 수 있지만, 불확실성(표준 오차 및 신뢰 구간)에 대한 `lm` 함수의 기본 출력은 정확하지 않습니다.

::: callout-tip
## `group_by()` 및 `summarize()`를 사용한 인과 추론, 재검토

이 간단한 예에서 가중 결과 모델은 가중 평균의 차이를 취하는 것과 같습니다.

```{r}
wt_means <- seven_dwarfs_9_with_wt |>
  group_by(park_extra_magic_morning) |>
  summarize(average_wait = weighted.mean(wait_minutes_posted_avg, w = w_att))

wt_means
```

차이는 `r round(wt_means$average_wait[[2]] - wt_means$average_wait[[1]], 2)`이며, 가중 결과 모델과 동일합니다.

가중 모집단은 성향 점수의 변수에 의한 교란이 없는 유사 모집단입니다.
철학적으로나 실질적으로 이 모집단의 데이터로 계산을 수행할 수 있습니다.
가중치에서 이미 교란을 설명했으므로 `group_by()` 및 `summarize()`를 사용한 인과 추론은 이제 잘 작동합니다.
:::

## 불확실성 추정하기

불확실성을 추정하는 세 가지 방법이 있습니다.

1.  부트스트랩
2.  결과 모델만 고려하는 샌드위치 추정기
3.  성향 점수 모델을 고려하는 샌드위치 추정기

첫 번째 옵션은 계산 집약적일 수 있지만 올바른 추정치를 얻어야 합니다.
두 번째 옵션은 계산적으로 가장 쉽지만 변동성을 과대평가하는 경향이 있습니다.
세 번째 옵션에 대한 R의 현재 솔루션은 많지 않지만(직접 코딩하는 것 외에), `{PSW}` 패키지가 이를 수행합니다.

### 부트스트랩

1.  데이터 표본에 대해 분석을 한 번 실행하는 함수 만들기

```{r}
fit_ipw <- function(.split, ...) {
  # 부트스트랩된 데이터 프레임 가져오기
  .df <- as.data.frame(.split)

  # 성향 점수 모델 적합시키기
  propensity_model <- glm(
    park_extra_magic_morning ~ park_ticket_season + park_close + park_temperature_high,
    data = seven_dwarfs_9,
    family = binomial()
  )

  # 역확률 가중치 계산하기
  .df <- propensity_model |>
    augment(type.predict = "response", data = .df) |>
    mutate(wts = wt_att(
      .fitted,
      park_extra_magic_morning,
      exposure_type = "binary"
    ))

  # 올바르게 부트스트랩된 ipw 모델 적합시키기
  lm(
    wait_minutes_posted_avg ~ park_extra_magic_morning,
    data = .df,
    weights = wts
  ) |>
    tidy()
}
```

2.  {rsample}을 사용하여 인과 효과 부트스트랩하기

```{r}
#| message: false
#| warning: false
library(rsample)

# 부트스트랩된 표본에 ipw 모델 적합시키기
bootstrapped_seven_dwarfs <- bootstraps(
  seven_dwarfs_9,
  times = 1000,
  apparent = TRUE
)

ipw_results <- bootstrapped_seven_dwarfs |>
  mutate(boot_fits = map(splits, fit_ipw))

ipw_results
```

결과를 살펴보겠습니다.

```{r}
ipw_results |>
  mutate(
    estimate = map_dbl(
      boot_fits,
      \(.fit) .fit |>
        filter(term == "park_extra_magic_morning") |>
        pull(estimate)
    )
  ) |>
  ggplot(aes(estimate)) +
  geom_histogram(bins = 30, fill = "#D55E00FF", color = "white", alpha = 0.8) +
  theme_minimal()
```

3.  인과 효과 추출하기

```{r}
# t-기반 CI 가져오기
boot_estimate <- int_t(ipw_results, boot_fits) |>
  filter(term == "park_extra_magic_morning")
boot_estimate
```

엑스트라 매직 아워가 있는 날 중에서 엑스트라 매직 아워가 오전 9시에서 10시 사이의 평균 게시 대기 시간에 미치는 예상 영향은 `r round(boot_estimate$.estimate, 1)`분, 95% CI (`r round(boot_estimate$.lower, 1)`, `r round(boot_estimate$.upper, 1)`)이라고 추정합니다.

### 결과 모델 샌드위치

샌드위치 추정기를 얻는 두 가지 방법이 있습니다.
첫 번째는 위와 동일한 가중 결과 모델을 `{sandwich}` 패키지와 함께 사용하는 것입니다.
`sandwich` 함수를 사용하면 아래와 같이 관심 있는 매개변수에 대한 강건한 분산 추정치를 얻을 수 있습니다.

```{r}
#| message: false
#| warning: false
library(sandwich)
weighted_mod <- lm(
  wait_minutes_posted_avg ~ park_extra_magic_morning,
  data = seven_dwarfs_9_with_wt,
  weights = w_att
)

sandwich(weighted_mod)
```

여기서 강건한 분산 추정치는 `r round(sandwich(weighted_mod)[2,2], 3)`입니다.
그런 다음 이를 사용하여 강건한 신뢰 구간을 구성할 수 있습니다.

```{r}
robust_var <- sandwich(weighted_mod)[2, 2]
point_est <- coef(weighted_mod)[2]
lb <- point_est - 1.96 * sqrt(robust_var)
ub <- point_est + 1.96 * sqrt(robust_var)
lb
ub
```

엑스트라 매직 아워가 있는 날 중에서 엑스트라 매직 아워가 오전 9시에서 10시 사이의 평균 게시 대기 시간에 미치는 예상 영향은 `r round(point_est, 1)`분, 95% CI (`r round(lb, 1)`, `r round(ub, 1)`)이라고 추정합니다.

또는 `{survey}` 패키지를 사용하여 모델을 적합시킬 수 있습니다.
이를 위해서는 가중 표를 적합시킬 때와 마찬가지로 설계 객체를 만들어야 합니다.

```{r}
#| message: false
#| warning: false
library(survey)

des <- svydesign(
  ids = ~1,
  weights = ~w_att,
  data = seven_dwarfs_9_with_wt
)
```

그런 다음 `svyglm`을 사용하여 결과 모델을 적합시킬 수 있습니다.

```{r}
svyglm(wait_minutes_posted_avg ~ park_extra_magic_morning, des) |>
  tidy(conf.int = TRUE)
```

### 성향 점수 모델을 고려하는 샌드위치 추정기

올바른 샌드위치 추정기는 성향 점수 모델 추정의 불확실성도 고려합니다.
`ipw()`를 사용하면 이를 수행할 수 있습니다.
이를 위해서는 성향 점수 모델과 결과 모델을 모두 제공해야 합니다.

```{r}
results <- ipw(propensity_model, weighted_mod)
results
```

결과를 데이터 프레임으로 수집할 수도 있습니다.

```{r}
results |>
  as.data.frame()
```
